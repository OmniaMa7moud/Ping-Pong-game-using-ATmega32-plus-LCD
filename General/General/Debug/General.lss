
General.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000082c  000008a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000199c  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080b  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000afc  00000000  00000000  00002b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  0000367c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000497  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e65  00000000  00000000  00003c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  7a:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <game>:
#include <util/delay.h>
#include "../HAL/LCD/LCD.h"

void game()
{
	LCD_instruction(0x40);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e6       	ldi	r24, 0x6F	; 111
  8a:	97 e1       	ldi	r25, 0x17	; 23
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <game+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <game+0x10>
  92:	00 00       	nop
	_delay_ms(3);
	//Human Custom Char(Location =0)
	LCD_write_char(0x04);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0x0A);
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  9c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0x04);
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0x0e);
  a6:	8e e0       	ldi	r24, 0x0E	; 14
  a8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b00010101);
  ac:	85 e1       	ldi	r24, 0x15	; 21
  ae:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b00000100);
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b00000100);
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b00000000);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	
	//stand cursor Custom Char(Location =1)
	LCD_write_char(0b0001000);
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001000);
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001000);
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001000);
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001000);
  dc:	88 e0       	ldi	r24, 0x08	; 8
  de:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001000);
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001000);
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b00000000);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	
	//Ball Custom Char(Location =2)
	LCD_write_char(0b0000000);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0000100);
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001010);
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0010001);
 106:	81 e1       	ldi	r24, 0x11	; 17
 108:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0010001);
 10c:	81 e1       	ldi	r24, 0x11	; 17
 10e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0001010);
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b0000100);
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_write_char(0b00000000);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	
	LCD_MOVE_CURSOR(1,1);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
	LCD_write_char(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	LCD_MOVE_CURSOR(1,20);
 132:	64 e1       	ldi	r22, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
	LCD_write_char(0);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	
	LCD_MOVE_CURSOR(4,1);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("P1: ");
 148:	80 e6       	ldi	r24, 0x60	; 96
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(4,15);
 150:	6f e0       	ldi	r22, 0x0F	; 15
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("P2: ");
 158:	85 e6       	ldi	r24, 0x65	; 101
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_SEND_STRING>
	u8 swich1 = 1;
	u8 swich2 = 1;
	u8 swich3 = 1;
	u8 swich4 = 1;
	u8 player1Score = 0;
	u8 player2Score = 0;
 160:	e1 2c       	mov	r14, r1
	unsigned char ballRow = 1;
	u8 swich1 = 1;
	u8 swich2 = 1;
	u8 swich3 = 1;
	u8 swich4 = 1;
	u8 player1Score = 0;
 162:	f1 2c       	mov	r15, r1
	LCD_SEND_STRING("P2: ");
	
	unsigned char cursorCounter=0;
	unsigned char human1Row = 1;
	unsigned char human2Row = 1;
	unsigned char ballRow = 1;
 164:	c1 e0       	ldi	r28, 0x01	; 1
	LCD_MOVE_CURSOR(4,15);
	LCD_SEND_STRING("P2: ");
	
	unsigned char cursorCounter=0;
	unsigned char human1Row = 1;
	unsigned char human2Row = 1;
 166:	01 e0       	ldi	r16, 0x01	; 1
	LCD_SEND_STRING("P1: ");
	LCD_MOVE_CURSOR(4,15);
	LCD_SEND_STRING("P2: ");
	
	unsigned char cursorCounter=0;
	unsigned char human1Row = 1;
 168:	11 e0       	ldi	r17, 0x01	; 1
	
	while(1)
	{
		
		
	for(cursorCounter=2; cursorCounter<20; cursorCounter++)
 16a:	d2 e0       	ldi	r29, 0x02	; 2
 16c:	57 c0       	rjmp	.+174    	; 0x21c <game+0x19a>
	{
		
		//Ball Location
		LCD_MOVE_CURSOR(ballRow,cursorCounter);
 16e:	6d 2f       	mov	r22, r29
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
		LCD_write_char(2);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	20 e7       	ldi	r18, 0x70	; 112
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	91 50       	subi	r25, 0x01	; 1
 184:	20 40       	sbci	r18, 0x00	; 0
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <game+0x100>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <game+0x10a>
 18c:	00 00       	nop
		_delay_ms(100);
		LCD_MOVE_CURSOR(ballRow,cursorCounter);
 18e:	6d 2f       	mov	r22, r29
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
		LCD_write_char(' ');
 196:	80 e2       	ldi	r24, 0x20	; 32
 198:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
		
		//Human Location
		LCD_MOVE_CURSOR(human1Row,20);
 19c:	64 e1       	ldi	r22, 0x14	; 20
 19e:	81 2f       	mov	r24, r17
 1a0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
		LCD_write_char(0);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
		
		//switch
		swich1 = DIO_ReadPinVal(PC, 0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich1 == 0) 
 1b2:	81 11       	cpse	r24, r1
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <game+0x144>
			{
				LCD_MOVE_CURSOR(human1Row,20);
 1b6:	64 e1       	ldi	r22, 0x14	; 20
 1b8:	81 2f       	mov	r24, r17
 1ba:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
				LCD_write_char(' ');
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
				human1Row = 1; 
 1c4:	11 e0       	ldi	r17, 0x01	; 1
				swich1 = 1;
			}
				
		swich2 = DIO_ReadPinVal(PC, 1);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich2 == 0) 
 1ce:	81 11       	cpse	r24, r1
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <game+0x16a>
			{ DIO_SetPinVal(PD, 1,1);
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
				LCD_MOVE_CURSOR(human1Row,20);
 1dc:	64 e1       	ldi	r22, 0x14	; 20
 1de:	81 2f       	mov	r24, r17
 1e0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
				LCD_write_char(' ');
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
				human1Row = 2; 
 1ea:	12 e0       	ldi	r17, 0x02	; 2
				swich2 = 1;}
		
		swich3 = DIO_ReadPinVal(PC, 2);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich3 == 0) 
 1f4:	81 11       	cpse	r24, r1
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <game+0x178>
			{
				 ballRow=1;
 1f8:	c1 e0       	ldi	r28, 0x01	; 1
				swich3 = 1;
			}
				
		swich4 = DIO_ReadPinVal(PC, 3);
 1fa:	63 e0       	ldi	r22, 0x03	; 3
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich4 == 0) 
 202:	81 11       	cpse	r24, r1
 204:	01 c0       	rjmp	.+2      	; 0x208 <game+0x186>
			{ 
				 ballRow = 2;
 206:	c2 e0       	ldi	r28, 0x02	; 2
 208:	9f ef       	ldi	r25, 0xFF	; 255
 20a:	20 e7       	ldi	r18, 0x70	; 112
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	91 50       	subi	r25, 0x01	; 1
 210:	20 40       	sbci	r18, 0x00	; 0
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <game+0x18c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <game+0x196>
 218:	00 00       	nop
	
	while(1)
	{
		
		
	for(cursorCounter=2; cursorCounter<20; cursorCounter++)
 21a:	df 5f       	subi	r29, 0xFF	; 255
 21c:	d4 31       	cpi	r29, 0x14	; 20
 21e:	08 f4       	brcc	.+2      	; 0x222 <game+0x1a0>
 220:	a6 cf       	rjmp	.-180    	; 0x16e <game+0xec>
				swich4 = 1;
			}
			_delay_ms(100);
		
	}
	if(human1Row == ballRow) { player1Score++; LCD_MOVE_CURSOR(4,4); LCD_write_char((player1Score%10)+48);}
 222:	1c 13       	cpse	r17, r28
 224:	17 c0       	rjmp	.+46     	; 0x254 <game+0x1d2>
 226:	f3 94       	inc	r15
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
 230:	8d ec       	ldi	r24, 0xCD	; 205
 232:	f8 9e       	mul	r15, r24
 234:	81 2d       	mov	r24, r1
 236:	11 24       	eor	r1, r1
 238:	86 95       	lsr	r24
 23a:	86 95       	lsr	r24
 23c:	86 95       	lsr	r24
 23e:	88 0f       	add	r24, r24
 240:	98 2f       	mov	r25, r24
 242:	99 0f       	add	r25, r25
 244:	99 0f       	add	r25, r25
 246:	89 0f       	add	r24, r25
 248:	9f 2d       	mov	r25, r15
 24a:	98 1b       	sub	r25, r24
 24c:	89 2f       	mov	r24, r25
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
	for(cursorCounter=19; cursorCounter>1; cursorCounter--)
 254:	d3 e1       	ldi	r29, 0x13	; 19
 256:	52 c0       	rjmp	.+164    	; 0x2fc <game+0x27a>
	{
		
		//Ball Location
		LCD_MOVE_CURSOR(ballRow,cursorCounter);
 258:	6d 2f       	mov	r22, r29
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
		LCD_write_char(2);
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	80 e7       	ldi	r24, 0x70	; 112
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <game+0x1ea>
 274:	00 c0       	rjmp	.+0      	; 0x276 <game+0x1f4>
 276:	00 00       	nop
		_delay_ms(100);
		LCD_MOVE_CURSOR(ballRow,cursorCounter);
 278:	6d 2f       	mov	r22, r29
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
		LCD_write_char(' ');
 280:	80 e2       	ldi	r24, 0x20	; 32
 282:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
		
		//Human Location
		LCD_MOVE_CURSOR(human2Row,1);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	80 2f       	mov	r24, r16
 28a:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
		LCD_write_char(0);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
		
		//switch
		swich3 = DIO_ReadPinVal(PC, 2);
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich3 == 0) 
 29c:	81 11       	cpse	r24, r1
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <game+0x22e>
			{ 
				LCD_MOVE_CURSOR(human2Row,1);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	80 2f       	mov	r24, r16
 2a4:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
				LCD_write_char(' ');
 2a8:	80 e2       	ldi	r24, 0x20	; 32
 2aa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
				human2Row = 1; 
 2ae:	01 e0       	ldi	r16, 0x01	; 1
				swich3 = 1;}
		swich4 = DIO_ReadPinVal(PC, 3);
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich4 == 0) 
 2b8:	81 11       	cpse	r24, r1
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <game+0x24a>
			{ 
				LCD_MOVE_CURSOR(human2Row,1);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	80 2f       	mov	r24, r16
 2c0:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
				LCD_write_char(' ');
 2c4:	80 e2       	ldi	r24, 0x20	; 32
 2c6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
				human2Row = 2;
 2ca:	02 e0       	ldi	r16, 0x02	; 2
				swich4 = 1;}
		swich1 = DIO_ReadPinVal(PC, 0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich1 == 0) 
 2d4:	81 11       	cpse	r24, r1
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <game+0x258>
			{
				 ballRow=1;
 2d8:	c1 e0       	ldi	r28, 0x01	; 1
				swich1 = 1;
			}
				
		swich2 = DIO_ReadPinVal(PC, 1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	0e 94 ba 03 	call	0x774	; 0x774 <DIO_ReadPinVal>
		if(swich2 == 0) 
 2e2:	81 11       	cpse	r24, r1
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <game+0x266>
			{ 
				 ballRow = 2;
 2e6:	c2 e0       	ldi	r28, 0x02	; 2
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	80 e7       	ldi	r24, 0x70	; 112
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <game+0x26c>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <game+0x276>
 2f8:	00 00       	nop
			}
			_delay_ms(100);
		
	}
	if(human1Row == ballRow) { player1Score++; LCD_MOVE_CURSOR(4,4); LCD_write_char((player1Score%10)+48);}
	for(cursorCounter=19; cursorCounter>1; cursorCounter--)
 2fa:	d1 50       	subi	r29, 0x01	; 1
 2fc:	d2 30       	cpi	r29, 0x02	; 2
 2fe:	08 f0       	brcs	.+2      	; 0x302 <game+0x280>
 300:	ab cf       	rjmp	.-170    	; 0x258 <game+0x1d6>
				swich2 = 1;
			}
			_delay_ms(100);
	}
	
	if(human2Row == ballRow) { player2Score++; LCD_MOVE_CURSOR(4,18); LCD_write_char((player2Score%10)+48);}
 302:	0c 13       	cpse	r16, r28
 304:	32 cf       	rjmp	.-412    	; 0x16a <game+0xe8>
 306:	e3 94       	inc	r14
 308:	62 e1       	ldi	r22, 0x12	; 18
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	0e 94 1a 03 	call	0x634	; 0x634 <LCD_MOVE_CURSOR>
 310:	8d ec       	ldi	r24, 0xCD	; 205
 312:	e8 9e       	mul	r14, r24
 314:	81 2d       	mov	r24, r1
 316:	11 24       	eor	r1, r1
 318:	86 95       	lsr	r24
 31a:	86 95       	lsr	r24
 31c:	86 95       	lsr	r24
 31e:	88 0f       	add	r24, r24
 320:	98 2f       	mov	r25, r24
 322:	99 0f       	add	r25, r25
 324:	99 0f       	add	r25, r25
 326:	89 0f       	add	r24, r25
 328:	2e 2d       	mov	r18, r14
 32a:	28 1b       	sub	r18, r24
 32c:	82 2f       	mov	r24, r18
 32e:	80 5d       	subi	r24, 0xD0	; 208
 330:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
 334:	1a cf       	rjmp	.-460    	; 0x16a <game+0xe8>

00000336 <main>:
}
	}

int main()
{
	DIO_init();
 336:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_init>
	LCD_INIT();
 33a:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_INIT>
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	89 e6       	ldi	r24, 0x69	; 105
 342:	98 e1       	ldi	r25, 0x18	; 24
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0xe>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x18>
 34e:	00 00       	nop
	_delay_ms(1000);
	game();
 350:	0e 94 41 00 	call	0x82	; 0x82 <game>

00000354 <LCD_instruction>:
 354:	cf 93       	push	r28
 356:	c8 2f       	mov	r28, r24
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 362:	4c 2f       	mov	r20, r28
 364:	40 71       	andi	r20, 0x10	; 16
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	55 95       	asr	r21
 36a:	47 95       	ror	r20
 36c:	55 95       	asr	r21
 36e:	47 95       	ror	r20
 370:	55 95       	asr	r21
 372:	47 95       	ror	r20
 374:	55 95       	asr	r21
 376:	47 95       	ror	r20
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 380:	4c 2f       	mov	r20, r28
 382:	40 72       	andi	r20, 0x20	; 32
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	55 95       	asr	r21
 388:	47 95       	ror	r20
 38a:	55 95       	asr	r21
 38c:	47 95       	ror	r20
 38e:	55 95       	asr	r21
 390:	47 95       	ror	r20
 392:	55 95       	asr	r21
 394:	47 95       	ror	r20
 396:	55 95       	asr	r21
 398:	47 95       	ror	r20
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 3a2:	4c 2f       	mov	r20, r28
 3a4:	40 74       	andi	r20, 0x40	; 64
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	04 2e       	mov	r0, r20
 3aa:	45 2f       	mov	r20, r21
 3ac:	00 0c       	add	r0, r0
 3ae:	44 1f       	adc	r20, r20
 3b0:	55 0b       	sbc	r21, r21
 3b2:	00 0c       	add	r0, r0
 3b4:	44 1f       	adc	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 3c0:	4c 2f       	mov	r20, r28
 3c2:	44 1f       	adc	r20, r20
 3c4:	44 27       	eor	r20, r20
 3c6:	44 1f       	adc	r20, r20
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 3da:	83 ef       	ldi	r24, 0xF3	; 243
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_instruction+0x8a>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_instruction+0x90>
 3e4:	00 00       	nop
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 3f0:	83 ef       	ldi	r24, 0xF3	; 243
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_instruction+0xa0>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_instruction+0xa6>
 3fa:	00 00       	nop
 3fc:	4c 2f       	mov	r20, r28
 3fe:	41 70       	andi	r20, 0x01	; 1
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 408:	4c 2f       	mov	r20, r28
 40a:	42 70       	andi	r20, 0x02	; 2
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	55 95       	asr	r21
 410:	47 95       	ror	r20
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 41a:	4c 2f       	mov	r20, r28
 41c:	44 70       	andi	r20, 0x04	; 4
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	55 95       	asr	r21
 422:	47 95       	ror	r20
 424:	55 95       	asr	r21
 426:	47 95       	ror	r20
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 430:	c8 70       	andi	r28, 0x08	; 8
 432:	4c 2f       	mov	r20, r28
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	55 95       	asr	r21
 438:	47 95       	ror	r20
 43a:	55 95       	asr	r21
 43c:	47 95       	ror	r20
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	64 e0       	ldi	r22, 0x04	; 4
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 454:	83 ef       	ldi	r24, 0xF3	; 243
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 46a:	83 ef       	ldi	r24, 0xF3	; 243
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <LCD_INIT>:
 47a:	8f e0       	ldi	r24, 0x0F	; 15
 47c:	97 e2       	ldi	r25, 0x27	; 39
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_INIT+0x4>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_INIT+0xa>
 484:	00 00       	nop
 486:	83 e3       	ldi	r24, 0x33	; 51
 488:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 48c:	89 ef       	ldi	r24, 0xF9	; 249
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <LCD_INIT+0x16>
 494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_INIT+0x1c>
 496:	00 00       	nop
 498:	82 e3       	ldi	r24, 0x32	; 50
 49a:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 49e:	89 ef       	ldi	r24, 0xF9	; 249
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_INIT+0x28>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_INIT+0x2e>
 4a8:	00 00       	nop
 4aa:	88 e2       	ldi	r24, 0x28	; 40
 4ac:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 4b0:	89 ef       	ldi	r24, 0xF9	; 249
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_INIT+0x3a>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_INIT+0x40>
 4ba:	00 00       	nop
 4bc:	8c e0       	ldi	r24, 0x0C	; 12
 4be:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 4c2:	89 ef       	ldi	r24, 0xF9	; 249
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_INIT+0x4c>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_INIT+0x52>
 4cc:	00 00       	nop
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 4d4:	89 ef       	ldi	r24, 0xF9	; 249
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_INIT+0x5e>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_INIT+0x64>
 4de:	00 00       	nop
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 4e6:	89 ef       	ldi	r24, 0xF9	; 249
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_INIT+0x70>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_INIT+0x76>
 4f0:	00 00       	nop
 4f2:	08 95       	ret

000004f4 <LCD_write_char>:
 4f4:	cf 93       	push	r28
 4f6:	c8 2f       	mov	r28, r24
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	63 e0       	ldi	r22, 0x03	; 3
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 502:	4c 2f       	mov	r20, r28
 504:	40 71       	andi	r20, 0x10	; 16
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	55 95       	asr	r21
 50a:	47 95       	ror	r20
 50c:	55 95       	asr	r21
 50e:	47 95       	ror	r20
 510:	55 95       	asr	r21
 512:	47 95       	ror	r20
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 520:	4c 2f       	mov	r20, r28
 522:	40 72       	andi	r20, 0x20	; 32
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	55 95       	asr	r21
 52c:	47 95       	ror	r20
 52e:	55 95       	asr	r21
 530:	47 95       	ror	r20
 532:	55 95       	asr	r21
 534:	47 95       	ror	r20
 536:	55 95       	asr	r21
 538:	47 95       	ror	r20
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 542:	4c 2f       	mov	r20, r28
 544:	40 74       	andi	r20, 0x40	; 64
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	04 2e       	mov	r0, r20
 54a:	45 2f       	mov	r20, r21
 54c:	00 0c       	add	r0, r0
 54e:	44 1f       	adc	r20, r20
 550:	55 0b       	sbc	r21, r21
 552:	00 0c       	add	r0, r0
 554:	44 1f       	adc	r20, r20
 556:	55 1f       	adc	r21, r21
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 560:	4c 2f       	mov	r20, r28
 562:	44 1f       	adc	r20, r20
 564:	44 27       	eor	r20, r20
 566:	44 1f       	adc	r20, r20
 568:	64 e0       	ldi	r22, 0x04	; 4
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 57a:	83 ef       	ldi	r24, 0xF3	; 243
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCD_write_char+0x8a>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_write_char+0x90>
 584:	00 00       	nop
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 590:	83 ef       	ldi	r24, 0xF3	; 243
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCD_write_char+0xa0>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_write_char+0xa6>
 59a:	00 00       	nop
 59c:	4c 2f       	mov	r20, r28
 59e:	41 70       	andi	r20, 0x01	; 1
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 5a8:	4c 2f       	mov	r20, r28
 5aa:	42 70       	andi	r20, 0x02	; 2
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	55 95       	asr	r21
 5b0:	47 95       	ror	r20
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 5ba:	4c 2f       	mov	r20, r28
 5bc:	44 70       	andi	r20, 0x04	; 4
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	55 95       	asr	r21
 5c2:	47 95       	ror	r20
 5c4:	55 95       	asr	r21
 5c6:	47 95       	ror	r20
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 5d0:	c8 70       	andi	r28, 0x08	; 8
 5d2:	4c 2f       	mov	r20, r28
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	55 95       	asr	r21
 5d8:	47 95       	ror	r20
 5da:	55 95       	asr	r21
 5dc:	47 95       	ror	r20
 5de:	55 95       	asr	r21
 5e0:	47 95       	ror	r20
 5e2:	64 e0       	ldi	r22, 0x04	; 4
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	62 e0       	ldi	r22, 0x02	; 2
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 5f4:	83 ef       	ldi	r24, 0xF3	; 243
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_write_char+0x104>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_write_char+0x10a>
 5fe:	00 00       	nop
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	62 e0       	ldi	r22, 0x02	; 2
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 4d 03 	call	0x69a	; 0x69a <DIO_SetPinVal>
 60a:	83 ef       	ldi	r24, 0xF3	; 243
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <LCD_write_char+0x11a>
 612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_write_char+0x120>
 614:	00 00       	nop
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <LCD_SEND_STRING>:
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	ec 01       	movw	r28, r24
 620:	03 c0       	rjmp	.+6      	; 0x628 <LCD_SEND_STRING+0xe>
 622:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LCD_write_char>
 626:	21 96       	adiw	r28, 0x01	; 1
 628:	88 81       	ld	r24, Y
 62a:	81 11       	cpse	r24, r1
 62c:	fa cf       	rjmp	.-12     	; 0x622 <LCD_SEND_STRING+0x8>
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <LCD_MOVE_CURSOR>:
	//Rows Range (1,2)
	//Columns Range (1,16)
	//Function that updates Address Counter (AC)
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
 634:	9f ef       	ldi	r25, 0xFF	; 255
 636:	98 0f       	add	r25, r24
 638:	94 30       	cpi	r25, 0x04	; 4
 63a:	c0 f4       	brcc	.+48     	; 0x66c <LCD_MOVE_CURSOR+0x38>
 63c:	65 31       	cpi	r22, 0x15	; 21
 63e:	c0 f4       	brcc	.+48     	; 0x670 <LCD_MOVE_CURSOR+0x3c>
 640:	66 23       	and	r22, r22
 642:	c1 f0       	breq	.+48     	; 0x674 <LCD_MOVE_CURSOR+0x40>
	{
		data=0x80;                       //Upper Left Location on Screen
	}
	else if(row==1)
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	19 f4       	brne	.+6      	; 0x64e <LCD_MOVE_CURSOR+0x1a>
	{
		data=0x80+column-1 ;
 648:	8f e7       	ldi	r24, 0x7F	; 127
 64a:	86 0f       	add	r24, r22
 64c:	16 c0       	rjmp	.+44     	; 0x67a <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==2)
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	19 f4       	brne	.+6      	; 0x658 <LCD_MOVE_CURSOR+0x24>
	{
		data=0xc0+column-1;
 652:	8f eb       	ldi	r24, 0xBF	; 191
 654:	86 0f       	add	r24, r22
 656:	11 c0       	rjmp	.+34     	; 0x67a <LCD_MOVE_CURSOR+0x46>
	}
	else if(row==3)
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	19 f4       	brne	.+6      	; 0x662 <LCD_MOVE_CURSOR+0x2e>
	{
		data=0x94 +column-1 ;
 65c:	83 e9       	ldi	r24, 0x93	; 147
 65e:	86 0f       	add	r24, r22
 660:	0c c0       	rjmp	.+24     	; 0x67a <LCD_MOVE_CURSOR+0x46>
	}
	else if (row==4)
 662:	84 30       	cpi	r24, 0x04	; 4
 664:	49 f4       	brne	.+18     	; 0x678 <LCD_MOVE_CURSOR+0x44>
	{
		data=0xD4 +column-1;
 666:	83 ed       	ldi	r24, 0xD3	; 211
 668:	86 0f       	add	r24, r22
 66a:	07 c0       	rjmp	.+14     	; 0x67a <LCD_MOVE_CURSOR+0x46>
	//Function that updates Address Counter (AC)
	
	unsigned char data = 0x80;
	if(row>4||row<1||column>20||column<1)
	{
		data=0x80;                       //Upper Left Location on Screen
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	05 c0       	rjmp	.+10     	; 0x67a <LCD_MOVE_CURSOR+0x46>
 670:	80 e8       	ldi	r24, 0x80	; 128
 672:	03 c0       	rjmp	.+6      	; 0x67a <LCD_MOVE_CURSOR+0x46>
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	01 c0       	rjmp	.+2      	; 0x67a <LCD_MOVE_CURSOR+0x46>
{
	//Rows Range (1,2)
	//Columns Range (1,16)
	//Function that updates Address Counter (AC)
	
	unsigned char data = 0x80;
 678:	80 e8       	ldi	r24, 0x80	; 128
	}
	else if (row==4)
	{
		data=0xD4 +column-1;
	}
	LCD_instruction(data);
 67a:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_instruction>
 67e:	89 ef       	ldi	r24, 0xF9	; 249
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <LCD_MOVE_CURSOR+0x4e>
 686:	00 c0       	rjmp	.+0      	; 0x688 <LCD_MOVE_CURSOR+0x54>
 688:	00 00       	nop
 68a:	08 95       	ret

0000068c <DIO_init>:
		case PB:
				PORTB = val;
		case PC:
				PORTC = val;
		case PD:
				PORTD = val;
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	8a bb       	out	0x1a, r24	; 26
 690:	87 bb       	out	0x17, r24	; 23
 692:	90 ef       	ldi	r25, 0xF0	; 240
 694:	94 bb       	out	0x14, r25	; 20
 696:	81 bb       	out	0x11, r24	; 17
 698:	08 95       	ret

0000069a <DIO_SetPinVal>:
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	01 f1       	breq	.+64     	; 0x6de <DIO_SetPinVal+0x44>
 69e:	30 f0       	brcs	.+12     	; 0x6ac <DIO_SetPinVal+0x12>
 6a0:	82 30       	cpi	r24, 0x02	; 2
 6a2:	b1 f1       	breq	.+108    	; 0x710 <DIO_SetPinVal+0x76>
 6a4:	83 30       	cpi	r24, 0x03	; 3
 6a6:	09 f4       	brne	.+2      	; 0x6aa <DIO_SetPinVal+0x10>
 6a8:	4c c0       	rjmp	.+152    	; 0x742 <DIO_SetPinVal+0xa8>
 6aa:	08 95       	ret
 6ac:	41 30       	cpi	r20, 0x01	; 1
 6ae:	59 f4       	brne	.+22     	; 0x6c6 <DIO_SetPinVal+0x2c>
 6b0:	2b b3       	in	r18, 0x1b	; 27
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_SetPinVal+0x22>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_SetPinVal+0x1e>
 6c0:	82 2b       	or	r24, r18
 6c2:	8b bb       	out	0x1b, r24	; 27
 6c4:	08 95       	ret
 6c6:	2b b3       	in	r18, 0x1b	; 27
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_SetPinVal+0x38>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_SetPinVal+0x34>
 6d6:	80 95       	com	r24
 6d8:	82 23       	and	r24, r18
 6da:	8b bb       	out	0x1b, r24	; 27
 6dc:	08 95       	ret
 6de:	41 30       	cpi	r20, 0x01	; 1
 6e0:	59 f4       	brne	.+22     	; 0x6f8 <DIO_SetPinVal+0x5e>
 6e2:	28 b3       	in	r18, 0x18	; 24
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_SetPinVal+0x54>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	6a 95       	dec	r22
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_SetPinVal+0x50>
 6f2:	82 2b       	or	r24, r18
 6f4:	88 bb       	out	0x18, r24	; 24
 6f6:	08 95       	ret
 6f8:	28 b3       	in	r18, 0x18	; 24
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_SetPinVal+0x6a>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_SetPinVal+0x66>
 708:	80 95       	com	r24
 70a:	82 23       	and	r24, r18
 70c:	88 bb       	out	0x18, r24	; 24
 70e:	08 95       	ret
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	59 f4       	brne	.+22     	; 0x72a <DIO_SetPinVal+0x90>
 714:	25 b3       	in	r18, 0x15	; 21
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_SetPinVal+0x86>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_SetPinVal+0x82>
 724:	82 2b       	or	r24, r18
 726:	85 bb       	out	0x15, r24	; 21
 728:	08 95       	ret
 72a:	25 b3       	in	r18, 0x15	; 21
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_SetPinVal+0x9c>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_SetPinVal+0x98>
 73a:	80 95       	com	r24
 73c:	82 23       	and	r24, r18
 73e:	85 bb       	out	0x15, r24	; 21
 740:	08 95       	ret
 742:	41 30       	cpi	r20, 0x01	; 1
 744:	59 f4       	brne	.+22     	; 0x75c <DIO_SetPinVal+0xc2>
 746:	22 b3       	in	r18, 0x12	; 18
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_SetPinVal+0xb8>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_SetPinVal+0xb4>
 756:	82 2b       	or	r24, r18
 758:	82 bb       	out	0x12, r24	; 18
 75a:	08 95       	ret
 75c:	22 b3       	in	r18, 0x12	; 18
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_SetPinVal+0xce>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	6a 95       	dec	r22
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_SetPinVal+0xca>
 76c:	80 95       	com	r24
 76e:	82 23       	and	r24, r18
 770:	82 bb       	out	0x12, r24	; 18
 772:	08 95       	ret

00000774 <DIO_ReadPinVal>:


u8 DIO_ReadPinVal(u8 portName, u8 pinNum)
{
	u8 returnValue = 0;
	switch(portName)
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	d1 f0       	breq	.+52     	; 0x7ac <DIO_ReadPinVal+0x38>
 778:	28 f0       	brcs	.+10     	; 0x784 <DIO_ReadPinVal+0x10>
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	59 f1       	breq	.+86     	; 0x7d4 <DIO_ReadPinVal+0x60>
 77e:	83 30       	cpi	r24, 0x03	; 3
 780:	e9 f1       	breq	.+122    	; 0x7fc <DIO_ReadPinVal+0x88>
 782:	50 c0       	rjmp	.+160    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	{
		case PA:
				returnValue = READ_BIT(PINA, pinNum);
 784:	49 b3       	in	r20, 0x19	; 25
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	9c 01       	movw	r18, r24
 78c:	06 2e       	mov	r0, r22
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_ReadPinVal+0x20>
 790:	22 0f       	add	r18, r18
 792:	33 1f       	adc	r19, r19
 794:	0a 94       	dec	r0
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_ReadPinVal+0x1c>
 798:	84 2f       	mov	r24, r20
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	82 23       	and	r24, r18
 79e:	93 23       	and	r25, r19
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_ReadPinVal+0x32>
 7a2:	95 95       	asr	r25
 7a4:	87 95       	ror	r24
 7a6:	6a 95       	dec	r22
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_ReadPinVal+0x2e>
				break;
 7aa:	08 95       	ret
		case PB:
				returnValue = READ_BIT(PINB, pinNum);
 7ac:	46 b3       	in	r20, 0x16	; 22
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	9c 01       	movw	r18, r24
 7b4:	06 2e       	mov	r0, r22
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_ReadPinVal+0x48>
 7b8:	22 0f       	add	r18, r18
 7ba:	33 1f       	adc	r19, r19
 7bc:	0a 94       	dec	r0
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_ReadPinVal+0x44>
 7c0:	84 2f       	mov	r24, r20
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	82 23       	and	r24, r18
 7c6:	93 23       	and	r25, r19
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_ReadPinVal+0x5a>
 7ca:	95 95       	asr	r25
 7cc:	87 95       	ror	r24
 7ce:	6a 95       	dec	r22
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_ReadPinVal+0x56>
				break;
 7d2:	08 95       	ret
		case PC:
				returnValue = READ_BIT(PINC, pinNum);
 7d4:	43 b3       	in	r20, 0x13	; 19
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	9c 01       	movw	r18, r24
 7dc:	06 2e       	mov	r0, r22
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_ReadPinVal+0x70>
 7e0:	22 0f       	add	r18, r18
 7e2:	33 1f       	adc	r19, r19
 7e4:	0a 94       	dec	r0
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_ReadPinVal+0x6c>
 7e8:	84 2f       	mov	r24, r20
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	82 23       	and	r24, r18
 7ee:	93 23       	and	r25, r19
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_ReadPinVal+0x82>
 7f2:	95 95       	asr	r25
 7f4:	87 95       	ror	r24
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_ReadPinVal+0x7e>
				break;
 7fa:	08 95       	ret
		case PD:
				returnValue = READ_BIT(PIND, pinNum);
 7fc:	40 b3       	in	r20, 0x10	; 16
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	9c 01       	movw	r18, r24
 804:	06 2e       	mov	r0, r22
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	22 0f       	add	r18, r18
 80a:	33 1f       	adc	r19, r19
 80c:	0a 94       	dec	r0
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	84 2f       	mov	r24, r20
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	82 23       	and	r24, r18
 816:	93 23       	and	r25, r19
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	95 95       	asr	r25
 81c:	87 95       	ror	r24
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
				break;
 822:	08 95       	ret



u8 DIO_ReadPinVal(u8 portName, u8 pinNum)
{
	u8 returnValue = 0;
 824:	80 e0       	ldi	r24, 0x00	; 0
				break;
		default:
		break;
	}
	return returnValue;
}
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
